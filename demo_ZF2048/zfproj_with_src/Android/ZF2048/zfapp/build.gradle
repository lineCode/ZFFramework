apply plugin: 'com.android.application'

def ZF_ROOT_PATH = this.projectDir.getAbsolutePath() + '/../../../../../../ZFFramework'
android {
    compileSdkVersion 24
    defaultConfig {
        minSdkVersion 18
        targetSdkVersion 24
        versionCode 1
        versionName '1.0'
        externalNativeBuild {
            cmake {
                arguments '-DANDROID_ARM_MODE=arm'
                cppFlags ''
            }
        }
        ndk {
            // abiFilters 'arm64-v8a', 'armeabi', 'armeabi-v7a', 'mips', 'mips64', 'x86', 'x86_64'
            abiFilters 'armeabi-v7a'
        }
    }
    buildTypes {
        release {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            java.srcDirs += ZF_ROOT_PATH + '/ZF/ZF_impl/zfsrc/ZFImpl/sys_Android/java'
            java.srcDirs += ZF_ROOT_PATH + '/ZF/ZFCore_impl/zfsrc/ZFImpl/sys_Android/java'
            java.srcDirs += ZF_ROOT_PATH + '/ZF/ZFAlgorithm_impl/zfsrc/ZFImpl/sys_Android/java'
            java.srcDirs += ZF_ROOT_PATH + '/ZF/ZFUIKit_impl/zfsrc/ZFImpl/sys_Android/java'
        }
    }
    externalNativeBuild {
        cmake {
            path 'CMakeLists.txt'
        }
    }
    buildToolsVersion '28.0.2'
}

dependencies {
    implementation fileTree(includes: ['*.jar'], dir: 'libs')
}

import org.apache.tools.ant.taskdefs.condition.Os

task ZFSetup {
    ext.ZFCopyRes = {ModulePath, LibName ->
        if(Os.isFamily(Os.FAMILY_WINDOWS)) {
            exec {
                executable 'cmd.exe'
                args '/c', ZF_ROOT_PATH + '/tools/util/copy_res.bat', ModulePath + '/ZF/' + LibName + '/zfres', this.projectDir.getAbsolutePath() + '/src/main/assets/zfres'
            }
        }
        else {
            exec {
                executable 'sh'
                args ZF_ROOT_PATH + '/tools/util/copy_res.sh', ModulePath + '/ZF/' + LibName + '/zfres', this.projectDir.getAbsolutePath() + '/src/main/assets/zfres'
            }
        }
    }
    doLast {
        if(Os.isFamily(Os.FAMILY_WINDOWS)) {
            exec {
                executable 'cmd.exe'
                args '/c', this.projectDir.getAbsolutePath() + '/../../../../../zfsetup.bat'
            }
            exec {
                executable 'cmd.exe'
                args '/c', ZF_ROOT_PATH + '/tools/util/copy_res.bat', this.projectDir.getAbsolutePath() + '/../../../../zfres', this.projectDir.getAbsolutePath() + '/src/main/assets/zfres'
            }
        }
        else {
            exec {
                executable 'sh'
                args this.projectDir.getAbsolutePath() + '/../../../../../zfsetup.sh'
            }
            exec {
                executable 'sh'
                args ZF_ROOT_PATH + '/tools/util/copy_res.sh', this.projectDir.getAbsolutePath() + '/../../../../zfres', this.projectDir.getAbsolutePath() + '/src/main/assets/zfres'
            }
        }
        ZFCopyRes(ZF_ROOT_PATH, 'ZFCore')
        ZFCopyRes(ZF_ROOT_PATH, 'ZFAlgorithm')
        ZFCopyRes(ZF_ROOT_PATH, 'ZFUtility')
        ZFCopyRes(ZF_ROOT_PATH, 'ZFUIKit')
        ZFCopyRes(ZF_ROOT_PATH, 'ZFUIWidget')
        ZFCopyRes(ZF_ROOT_PATH, 'ZF_impl')
        ZFCopyRes(ZF_ROOT_PATH, 'ZFCore_impl')
        ZFCopyRes(ZF_ROOT_PATH, 'ZFAlgorithm_impl')
        ZFCopyRes(ZF_ROOT_PATH, 'ZFUIKit_impl')
    }
}
preBuild.dependsOn ZFSetup

